<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.app.mapper.RecordMapper">

	<select id="selectAll"
		resultType="com.example.app.domain.RecordDB">
		select * from records
	</select>

	<select id="countLastAndThisWeek" parameterType="int"
		resultType="int">
		select count(*) from records
		where
		start_at between curdate()
		- interval (dayofweek(curdate())-1 -(#{x})) day
		and
		curdate() - interval
		(dayofweek(curdate())-2 -(#{x})) day;
	</select>

	<sql id="joinSymptoms">
		select
		symptoms_pattern.symptoms_name,count(symptoms.symptoms_id) as count
		from records
		join symptoms
		on records.id = symptoms.records_id
		join
		symptoms_pattern
		on symptoms.symptoms_id = symptoms_pattern.id
	</sql>

	<select id="getTop3TodaySymptoms" resultMap="recordMap">
		<include refid="joinSymptoms"></include>
		where start_at between
		curdate() and curdate() + interval 1 day
		group by
		symptoms_id
		limit 3
		;
	</select>

	<select id="getTop3YesterdaySymptoms" resultMap="recordMap">
		<include refid="joinSymptoms"></include>
		where start_at between
		curdate() - interval 1 day and curdate()
		group by
		symptoms_id
		;
	</select>

	<resultMap id="recordMap"
		type="com.example.app.dto.SymptomsCount">
		<result property="symptomsName" column="symptoms_name" />
		<result property="count" column="count" />
	</resultMap>
	<insert id="insert"
		parameterType="com.example.app.domain.RecordDB">
		insert into records
		(register_id, registered_at,
		updated_at,start_at,end_at,
		patient_pattern,consultation,
		response,staff_id)
		values
		(#{registerId},now(),now(),
		replace(#{startAt},'T',' '),
		replace(#{endAt},'T',' '),
		#{patient.id},#{consultation},#{response},#{staff.id});
	</insert>

	<select id="getLastInsertId" resultType="int">
		SELECT LAST_INSERT_ID();
	</select>

	<select id="selectAllRecordsWithDetails"
		resultMap="recordDetailsMap">
		<include refid="joinSql"></include>
		group by r.id;
	</select>

	<select id="findUnapprovedRecords" resultMap="recordDetailsMap">
		<include refid="joinSql" />
		<choose>
			<!-- 未承認：approval == null かつ loginNum != 2 の場合 -->
			<when test="approval == null and loginNum != 2">
				where r.register_id != 2 and
				r.approval_status is null
			</when>
			<!-- 未承認：approval == null かつ loginNum == 2 の場合 -->
			<when test="approval == null">
				where r.approval_status is null
			</when>
			<!-- 差し戻し：approval == 2 の場合 -->
			<when test="approval == 2">
				where r.register_id = #{loginNum} and
				r.approval_status = 2
			</when>
			<!-- 承認済み:(その他の場合) -->
			<otherwise>
				where r.approval_status = 1
			</otherwise>
		</choose>
		group by r.id;
	</select>

	<resultMap id="recordDetailsMap"
		type="com.example.app.domain.RecordDB">
		<id property="id" column="id" />
		<result property="staff.name" column="staff_name" />
		<result property="patient.attribute" column="patient_attribute" />
		<result property="symptomsName" column="symptoms_name" />
	</resultMap>
	
	<select id="findById" resultMap="findMap">
		select * from records where id = #{id};
	</select>
	<resultMap id="findMap" type="com.example.app.domain.RecordDB">
		<id property="id" column="id" />
		<result property="staff.id" column="staff_id" />
		<result property="patient.id" column="patient_pattern" />
	
	</resultMap>
	
	<sql id="joinSql">
		select
		r.id,
		r.register_id,
		r.start_at,
		r.end_at,
		s.name as
		staff_name,
		p.attribute as patient_attribute,
		r.consultation,
		r.response,
		r.approval_status,
		group_concat(symptoms_pattern.symptoms_name separator ",") as
		symptoms_name
		from records as r
		join staff as s on r.staff_id = s.id
		join patient as p
		on r.patient_pattern = p.id
		join symptoms on r.id =
		symptoms.records_id
		join symptoms_pattern on symptoms.symptoms_id =
		symptoms_pattern.id
	</sql>
</mapper>